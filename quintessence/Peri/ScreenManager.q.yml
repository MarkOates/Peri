parent_classes:
  - class: AllegroFlare::Screen
    scope: public
    init_with: "{}"


properties:
  - name: framework
    type: AllegroFlare::Framework*
    init_with: nullptr
    constructor_arg: true
  - name: screens
    type: AllegroFlare::Screens*
    init_with: nullptr
    constructor_arg: true
  - name: music_track_elements
    type: std::map<std::string, Peri::AudioRepositoryElement>
    init_with: '{}'
    constructor_arg: true
  - name: sound_effect_elements
    type: std::map<std::string, Peri::AudioRepositoryElement>
    init_with: '{}'
    constructor_arg: true
  - name: current_active_screen
    type: AllegroFlare::Screen*
    init_with: nullptr


functions:

  - name: initialize
    type: void
    body: |
      return;


  - name: key_down_func
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    body: |
      switch(ev->keyboard.keycode)
      {
      case ALLEGRO_KEY_ESCAPE:
         framework->shutdown_program = true;
         break;
      }
      return;
    body_dependency_symbols:
      - Peri::GameplayScreen*


  - name: run
    type: std::string
    body: |
      return "Hello World!";


  - name: load_initial_screen
    type: void
    body: |
      if (current_active_screen != nullptr)
      {
         // remove screen from screens
         screens->remove(current_active_screen);
         delete current_active_screen;
         current_active_screen = nullptr;
      }

      current_active_screen = new Peri::GameplayScreen;

      screens->add(current_active_screen);

      return;


dependencies:
  - symbol: AllegroFlare::Display*
    headers: [ AllegroFlare/Display.hpp ]
  - symbol: AllegroFlare::Framework*
    headers: [ AllegroFlare/Framework.hpp ]
  - symbol: AllegroFlare::Screen
    headers: [ AllegroFlare/Screen.hpp ]
  - symbol: AllegroFlare::Screen*
    headers: [ AllegroFlare/Screen.hpp ]
  - symbol: AllegroFlare::Screens*
    headers: [ AllegroFlare/Screens.hpp ]
  - symbol: std::map<std::string, Peri::AudioRepositoryElement>
    headers: [ map, string, Peri/AudioRepositoryElement.hpp ]
  - symbol: ALLEGRO_EVENT*
    headers: [ allegro5/allegro.h ]
  - symbol: Peri::GameplayScreen*
    headers: [ Peri/GameplayScreen.hpp ]

